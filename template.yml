AWSTemplateFormatVersion: '2010-09-09'
Description: CloudComp Assignment 3
Resources:
  PhotoBucket:
    Type: 'AWS::S3::Bucket'
  FrontendBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  IndexPhotosRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: IndexPhotosRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRekognitionFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
  IndexPhotos:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          # to be simple, use a simple code
          import json

          def lambda_handler(event, context):
              print(json.dumps(event))

              return {
                statusCode': 200,
                'body': json.dumps('Hello from index-photos!')
              }
      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !GetAtt SearchPhotosRole.Arn
  SearchPhotosRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: SearchPhotosRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonOpenSearchServiceFullAccess'
  SearchPhotos:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          # to be simple, use a simple code
          import json

          def lambda_handler(event, context):
              print(json.dumps(event))

              return {
                statusCode': 200,
                'body': json.dumps('Hello from search-photos!')
              }
      Handler: index.lambda_handler
      Runtime: python3.12
      Role: !GetAtt SearchPhotosRole.Arn	
  RestApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        swagger: '2.0'
        info:
          title: AI Photo Search
          description: 'AI Photo Search application, built during the Cloud and Big Data course at Columbia University'
          version: 1.0.0
        schemes:
          - https
        basePath: /v1
        produces:
          - application/json
        paths:
          /search:
            get:
              summary: photo search method
              description: 'This API takes in a search query as a query parameter and returns zero or more photos that match the search query.'
              operationId: searchPhotos
              parameters:
                - in: query
                  name: q
                  schema:
                    type: string
                  description: the string to be searched
              produces:
                - application/json
              responses:
                '200':
                  description: search results
                  schema:
                    $ref: '#/definitions/SearchResponse'
                '403':
                  description: Unauthorized
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
          /upload:
            put:
              summary: photo upload method
              description: 'This API takes in the multi-part body sent to it (ex. a photo) and uploads it to an S3 bucket.'
              operationId: uploadPhoto
              consumes:
                - image/png
                - image/jpg
                - image/jpeg
              produces:
                - application/json
              responses:
                '200':
                  description: S3 PUT operation response
                  schema:
                    type: object
                '403':
                  description: Unauthorized
                  schema:
                    $ref: '#/definitions/Error'
                '500':
                  description: Unexpected error
                  schema:
                    $ref: '#/definitions/Error'
        definitions:
          SearchResponse:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: '#/definitions/Photo'
          Photo:
            type: object
            properties:
              url:
                type: string
              labels:
                type: array
                items:
                  type: string
          Error:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string
      Parameters:
        endpointConfigurationTypes: REGIONAL